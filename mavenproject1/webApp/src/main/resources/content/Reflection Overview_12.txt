<p>However, the main Java runtime does not know about the <code lang="Java" xml:lang="Java">Distance</code> class. The name of the class to execute is a runtime value. Reflection allows a Java program to work with classes even though the classes are not known when the program was written. Let's explore what the <code lang="Java" xml:lang="Java">invokeMain</code> method is doing. The first statement at line 9 is an example of <a href="/wiki/Java_Programming/Reflection/Dynamic_Class_Loading" title="Java Programming/Reflection/Dynamic Class Loading">dynamic class loading</a>. The <code lang="Java" xml:lang="Java">forName()</code> method will load a Java class and return an instance of <code><a href="/w/index.php?title=Category:Java_Programming/API/java.lang&amp;action=edit&amp;redlink=1" class="new" title="Category:Java Programming/API/java.lang (does not exist)">java.lang</a>.<a href="/wiki/Java_Programming/API/java.lang.Class" title="Java Programming/API/java.lang.Class">Class</a></code> that results from loading the class. In this case, we are loading the class <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"Distance"</font></code> from the default package. We store the class object in the local variable <code lang="Java" xml:lang="Java">distanceClass</code>; its type is <code><a href="/wiki/Java_Programming/API/java.lang.Class" title="Java Programming/API/java.lang.Class">Class</a></code>&lt;?&gt;. The second statement at line 10 simply creates a <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code> array with the four command line arguments we wish to pass to the <code lang="Java" xml:lang="Java">main</code> method of the <code lang="Java" xml:lang="Java">Distance</code> class. The third statement at line 11 performs a reflection operation on the <code lang="Java" xml:lang="Java">Distance</code> class. The <code lang="Java" xml:lang="Java">getMethod()</code> method is defined for the <code><a href="/wiki/Java_Programming/API/java.lang.Class" title="Java Programming/API/java.lang.Class">Class</a></code> class. It takes a variable number of parameters: the method name is the first parameter and the remaining parameters are the types of each of <code lang="Java" xml:lang="Java">main</code>'s parameters. The method name is trivial: we want to invoke the <code lang="Java" xml:lang="Java">main</code> method, so we pass in the name <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"main"</font></code>. We then add a <code lang="Java" xml:lang="Java">Class</code> variable for each of the method parameters. <code lang="Java" xml:lang="Java">main</code> accepts one parameter (<code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code><code lang="Java" xml:lang="Java">[] args)</code> so we add a single <code lang="Java" xml:lang="Java">Class</code> element representing the String[]. The <code lang="Java" xml:lang="Java">getMethod</code> method has a return type of <code lang="Java" xml:lang="Java">java.lang.reflect.Method</code>; we store the result in a local variable named <code lang="Java" xml:lang="Java">mainMethod</code>. Finally, we invoke the method by calling the <code lang="Java" xml:lang="Java">invoke()</code> method of the <code lang="Java" xml:lang="Java">Method</code> instance. This method's first parameter is the instance to invoke on, and the remaining parameters are for the invokee's parameters. Since we are invoking a static method and not an instance method, we pass <code><a href="/wiki/Java_Programming/Literals/null" title="Java Programming/Literals/null" class="mw-redirect"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">null</font></a></code> as the instance argument. Since we only have a single parameter we pass it as the second argument. However, we must cast the parameter to Object to indicate that the array is the parameter, and not that the parameters are in the array. See varargs for more details on this.</p>