<p>Whenever an interesting event occurs, the <code>EventSourceClass</code> must notify all of the listeners for that event that it knows about by calling the notification method that exist for that purpose. All of the notification methods (in this example there is only one, <code>interestingEventOccurred</code>) have been grouped together by topic in a listener interface: <code>InterestingEventListener</code>, which implements <code>java.util.EventListener</code> and is named according to the Event Model conventions. This interface must be implemented by all event listener classes (in this case only <code>InterestingEventListenerImpl</code>). Because <code>EventSourceClass</code> must be able to notify any interested listeners, it must be possible to register them. For this purpose the <code>EventSourceClass</code> has an <code>addInterestingEventListener</code> method. And since it is required, there is a <code>removeInterestingEventListener</code> method as well.</p>