<p>JUnit's are unit test cases, used to test the Java programs. Now you know how to test a private method using Reflection in JUnit. There's a long-standing debate on whether testing private members is a good habit<sup id="cite_ref-1" class="reference"><a href="#cite_note-1">[1]</a></sup>;There are cases where you want to make sure a class exhibited the right behavior while not making the fields that need checking to assert that public (as it's generally considered bad practice to create accessors to a class just for the sake of a unit test). There are also cases when you can greatly simplify a test case by using reflection to test all smaller private methods (and their various branches), then test the main function. With <a rel="nofollow" class="external text" href="http://dp4j.com">dp4j</a> it is possible to test private members without directly using the Reflection API but simply accessing them as if they were accessible from the testing method; dp4j injects the needed Reflection code at compile-time<sup id="cite_ref-2" class="reference"><a href="#cite_note-2">[2]</a></sup>.</p>